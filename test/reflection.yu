private:
extern
	func print(...*)
	
	class MemberInfo
		method getName$()
		method getMemberType$()
		method getAnnotationList()->any[]
	end

	class FieldInfo extends MemberInfo
		method getType()->TypeInfo
	end

	class MethodInfo extends MemberInfo
		method getRetType()->TypeInfo
		method getArguments()->ArgInfo[]
	end

	class ArgInfo
		method getName$()
	end

	class TypeInfo
		method getName$()
		method isExtern?()

		method getMemberList()->MemberInfo[]
		
		method getMember(name$)->MemberInfo
		method getMethod(name$)->MemberInfo
		method getField(name$)->MemberInfo

		func '__yu_gettypeinfoN' as getByName(name$) -> TypeInfo
		func '__yu_gettypeinfoV' as getByValue(value*) -> TypeInfo
	end

	
end

__Lua[[
		function getClassAttribute(class, id)
			local attr=class.__classAttr
			return attr and attr[id]
		end
]]

const UnitTestName='shit'

class UnitTest
	field name$
end

class Property
	global Number=Property{type='number'}
	global Object=Property{type='object'}
	global String=Property{type='string'}

	field type$
end

local properties={
	['Number']=Property{type='number'},
	['Object']=Property{type='object'},
}



-- function Property__() = Property(1)

@UnitTest{name = UnitTestName}
class Test

	@Property.String
	field x,y,z#

	method __new(x#,y=1)
	end

end


local m=TypeInfo.getByName('Test')
print(m.getName(), m.isExtern())
local members=m.getMemberList()
for i, minfo in members do
	print('member:', minfo.getMemberType(), minfo.getName())
end

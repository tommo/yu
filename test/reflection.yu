private:
extern
	func print(...*)
	class File
	end
end

__Lua[[
		function getClassAttribute(class, id)
			local attr=class.__classAttr
			return attr and attr[id]
		end
]]

const UnitTestName='shit'

class UnitTest
	field name$
end

class Property
	global Number=Property{type='number'}
	global Object=Property{type='object'}
	global String=Property{type='string'}

	field type$
end

local properties={
	['Number']=Property{type='number'},
	['Object']=Property{type='object'},
}



-- function Property__() = Property(1)

@UnitTest{name = UnitTestName}
class Test

	@Property.String
	field x,y,z#

	method __new(x#,y=1)
	end

end


local a=Test(1)
print(a is Test)


-- local x=Test()
-- print(getClassAttribute(Test,'good'))

-- class TypeInfo
-- 	method getName$() abstract
-- end

-- class Class extends TypeInfo
-- 	method findMember(id$)->Member

-- 	end

-- 	method getAttribute(id$)->*
-- 	end
-- end

-- class Member
-- 	method getAttribute(id$)->*
-- 	end
-- end

-- class Method extends Member
-- end

-- class Field extends Member
-- 	method get()->*
-- 	end

-- 	method set(v*)
-- 	end
-- end



import 'lua.yu'
-- private:
extern
	class MemberInfo
		method getName()->string
		method getMemberType()->string
		method getAnnotationList()->any[]
		method isPrivate?()
	end

	class FieldInfo extends MemberInfo
		method getType()->TypeInfo
		method getValue(obj:any) -> any
		method setValue(obj:any, value:any)
	end

	class MethodInfo extends MemberInfo
		method getRetType()->TypeInfo
		method getArguments()->ArgInfo[]
	end

	class ArgInfo
		method getName$()
		method getType()->TypeInfo
	end

	class TypeInfo
		method getTag()->string
		method getName()->string
		method getAnnotationList()->any[]
		method isExtern?()
		method isPrivate?()
		func '__yu_gettypeinfoN' as getByName(name:string) -> TypeInfo
		func '__yu_gettypeinfoV' as getByValue(value:any) -> TypeInfo
	end

	class ClassType extends TypeInfo
		method getSuperClass()->ClassType
		method getSubClassList()->ClassType[]

		method getMemberList()->MemberInfo[]
		method getMember(name:string)->MemberInfo

		method getMethod(name:string)->MethodInfo
		method getField(name:string)->FieldInfo
	end

	class EnumType extends TypeInfo
		method getItem(name:string)-> number
		method getItemTable() -> number[string]
	end

	class ObjectType extends TypeInfo	end
	-- class UserdataType extends TypeInfo	end
	class NumberType extends TypeInfo	end
	class StringType extends TypeInfo	end
	class BooleanType extends TypeInfo end
	class NilType extends TypeInfo end

	class FunctionType extends TypeInfo
		method getObjectType() -> ObjectType
	end

end

enum State{OK=-3, DONE=-1,XXX,ZZZ}

const UnitTestName='shit'

class UnitTest
	field name$
end

class Property
	global Number=Property{type='number'}
	global Object=Property{type='object'}
	global String=Property{type='string'}

	field type$
	field id#

	method __init()
		global _id = 11
		self.id = _id
		_id += 1
	end

end

local properties={
	['Number'] = Property{type='number'},
	['Object'] = Property{type='object'},
}

-- function Property__() = Property(1)

@UnitTest{name = 'Critical Test'}
@UnitTest{name = 'Another Test'}
@Property.String
class Test

	@Property.String
	field name='joe'

	@Property.String
	field x,y,z#

	method innerMethod1()
	end

	@Property.String
	method method2()
	end

end


local m = TypeInfo.getByName('Test') as ClassType
local members=m.getMemberList()
for i, minfo in members do
	print('member:', minfo.getMemberType(), minfo.getName(), minfo.isPrivate())
end
assert m.getField('x').getType() is NumberType
assert m.getField('name').getType() is StringType

for i, a in m.getAnnotationList() do
	if a is UnitTest then
		local a1 = a as UnitTest
		if a1 then
			print(a1.name)
		end
	elseif a is Property then
		print( (a as Property).id )
	else
		print(TypeInfo.getByValue(a).getName())
	end
end

local o=Test()
m.getField('x').setValue(o, 10)
print(o.x)

local e=TypeInfo.getByName('State') as EnumType
for k,v in e.getItemTable() do
	print(k,v)
end

assert e.getItem('OK')==-3

assert e.getTag()=='enum'
assert m.getTag()=='class'

